from PIL import Image
from io import BytesIO
import base64
import numpy as np

def add_tranpsarency(im, bg_colour=(255, 255, 255)):
    data = np.array(im)
    rgb = data[:,:,:3]
    black = [0, 0, 0, 0]
    mask = np.all(rgb == bg_colour, axis=-1)
    data[mask] = black
    return Image.fromarray(data)

def decode_img(string):
    return Image.open(BytesIO(base64.b64decode(string)))

def decode_and_scale(string):
    img = decode_img(string)
    img = img.convert('RGBA')
    img = add_tranpsarency(img)
    img = img.resize((28, 28), Image.NEAREST)
    img = np.mean(img, axis=2)
    # Image.fromarray(img).show()
    return np.array(img)

if __name__ == '__main__':
    test = ''''''
    decode_and_scale(test)